# Dockerfile for building a cross developing environment.
#
# (c) 2017-2018 by Kaspter Ju <camus@rtavs.com>
#
# To build the environment invoke
#
# $ docker build -t bionic:amd64 -f amd64/Dockerfile.bionic .
#
# This creates a docker image called "<distro>:<arch>". Note that it will
# take a while if you are building this image the first time.
#
# Note that Docker requires a relatively recent Linux kernel.
# 3.8 is the current minimum.
#

FROM ubuntu:bionic
MAINTAINER Kaspter Ju "camus@rtavs.com"

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

RUN echo "deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse" > /etc/apt/sources.list
RUN echo "deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse" >> /etc/apt/sources.list
RUN echo "deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse" >> /etc/apt/sources.list
RUN echo "deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse" >> /etc/apt/sources.list

RUN apt-get update && \
    apt-get install -y \
       autoconf \
       bash-completion \
       bc \
       bison \
       build-essential \
       ccache \
       cmake \
       curl \
       cpio \
       debootstrap \
       device-tree-compiler \
       dosfstools \
       flex \
       git \
       gperf \
       gnupg \
       libncurses5-dev \
       libgl1-mesa-dev \
       libxml2-utils \
       libssl-dev  \
       locales \
       lunzip \
       mtools \
       parted \
       pkg-config \
       pxz \
       rsync \
       sudo  \
       unzip \
       vim \
       wget \
       zip \
       zlib1g-dev && \
    apt-get autoclean

RUN locale-gen en_US.UTF-8

ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

# install cross build toolchain
RUN apt-get install -y \
    crossbuild-essential-armhf \
    crossbuild-essential-arm64


RUN apt-get install -y \
        python && \
    apt-get autoclean


RUN apt-get install -y \
        qemu-user-static \
        live-build && \
    apt-get autoclean

# build atf
RUN apt-get install -y \
        gcc-arm-none-eabi && \
    apt-get autoclean

# build uboot.its
RUN apt-get install -y \
        python-pyelftools && \
    apt-get autoclean

###################################################################################
########################## AML toolchian ##########################################
# add i386 depend
RUN dpkg --add-architecture i386
RUN apt-get update && \
    apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386 zlib1g:i386

# install linaro toolchain
RUN wget -O /tmp/gcc-linaro-aarch64-none-elf-4.8-2013.11_linux.tar.xz https://releases.linaro.org/archive/13.11/components/toolchain/binaries/gcc-linaro-aarch64-none-elf-4.8-2013.11_linux.tar.xz && \
    tar -C /opt -xf /tmp/gcc-linaro-aarch64-none-elf-4.8-2013.11_linux.tar.xz && \
    rm /tmp/gcc-linaro-aarch64-none-elf-4.8-2013.11_linux.tar.xz

RUN wget -O /tmp/gcc-linaro-7.3.1-2018.05-i686_aarch64-elf.tar.xz https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/aarch64-elf/gcc-linaro-7.3.1-2018.05-i686_aarch64-elf.tar.xz && \
    tar -C /opt -xf /tmp/gcc-linaro-7.3.1-2018.05-i686_aarch64-elf.tar.xz && \
    rm /tmp/gcc-linaro-7.3.1-2018.05-i686_aarch64-elf.tar.xz

RUN wget -O /tmp/gcc-linaro-6.3.1-2017.02-x86_64_arm-linux-gnueabihf.tar.xz https://releases.linaro.org/components/toolchain/binaries/6.3-2017.02/arm-linux-gnueabihf/gcc-linaro-6.3.1-2017.02-x86_64_arm-linux-gnueabihf.tar.xz && \
    tar -C /opt -xf /tmp/gcc-linaro-6.3.1-2017.02-x86_64_arm-linux-gnueabihf.tar.xz && \
    rm /tmp/gcc-linaro-6.3.1-2017.02-x86_64_arm-linux-gnueabihf.tar.xz

RUN apt-get install gcc-arm-none-eabi && apt-get autoclean

##################################################################################

# for hstr
RUN apt-get install -y \
        libncursesw5-dev \
        libreadline-dev && \
    apt-get autoclean

RUN wget -O /tmp/hstr-2.5.0-tarball.tgz https://github.com/dvorka/hstr/releases/download/2.5/hstr-2.5.0-tarball.tgz && \
    tar -C /tmp -xf /tmp/hstr-2.5.0-tarball.tgz && \
    cd /tmp/hstr  && \
    ./configure && make && make install && \
    rm -rf /tmp/hstr-2.5.0-tarball.tgz /tmp/hstr


RUN apt-get update && \
    apt-get install -y \
        python3.8 \
        iproute2 && \
    apt-get autoclean


########################################################################
## use no-root user amd64
########################################################################

# create cross-build user amd64
RUN useradd -c 'cross-build-user' -m -d /home/amd64 -s /bin/bash amd64
RUN usermod -a -G sudo amd64

# default username, can be override by docker run environment variables
ENV USER=amd64 \
    HOME=/home/amd64

# Enable passwordless sudo for users under the "sudo" group
RUN sed -i -e \
      's/%sudo\s\+ALL=(ALL\(:ALL\)\?)\s\+ALL/%sudo ALL=NOPASSWD:ALL/g' \
      /etc/sudoers

USER amd64

RUN git config --global user.email "camus@rtavs.com"
RUN git config --global user.name "Kaspter Ju"
